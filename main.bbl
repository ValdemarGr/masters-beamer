% $ biblatex auxiliary file $
% $ biblatex bbl format version 2.9 $
% Do not modify the above lines!
%
% This is an auxiliary file used by the 'biblatex' package.
% This file may safely be deleted. It will be recreated by
% biber as required.
%
\begingroup
\makeatletter
\@ifundefined{ver@biblatex.sty}
  {\@latex@error
     {Missing 'biblatex' package}
     {The bibliography requires the 'biblatex' package.}
      \aftergroup\endinput}
  {}
\endgroup


\refsection{0}
  \datalist[entry]{anyt/global//global/global}
    \entry{NAMEHERE}{article}{}
      \name{author}{3}{}{%
        {{hash=22b7773ff9cfff6bdc08d0cd1cc240a0}{%
           family={Kfoury},
           familyi={K\bibinitperiod},
           given={A.\bibnamedelimi J.},
           giveni={A\bibinitperiod\bibinitdelim J\bibinitperiod}}}%
        {{hash=ec834fb1ab41a9de3a1510b3174f0a6f}{%
           family={Tiuryn},
           familyi={T\bibinitperiod},
           given={J.},
           giveni={J\bibinitperiod}}}%
        {{hash=4d77f7568351bd1f2106304fb79364c4}{%
           family={Urzyczyn},
           familyi={U\bibinitperiod},
           given={P.},
           giveni={P\bibinitperiod}}}%
      }
      \list{language}{1}{%
        {English}%
      }
      \strng{namehash}{735befcecad88406f64f02fb3c652654}
      \strng{fullhash}{735befcecad88406f64f02fb3c652654}
      \strng{bibnamehash}{735befcecad88406f64f02fb3c652654}
      \strng{authorbibnamehash}{735befcecad88406f64f02fb3c652654}
      \strng{authornamehash}{735befcecad88406f64f02fb3c652654}
      \strng{authorfullhash}{735befcecad88406f64f02fb3c652654}
      \field{labelalpha}{KTU93}
      \field{sortinit}{K}
      \field{sortinithash}{9fd838a31ba64d981e8f44562bd33f89}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{The Semi-Unification Problem (SUP) is a natural generalization of both first-order unification and matching. The problem arises in various branches of computer science and logic. Although several special cases of SUP are known to be decidable, the problem in general has been open for several years. We show that SUP in general is undecidable, by reducing what we call the "boundedness problem" of Turing machines to SUP. The undecidability of this boundedness problem is established by a technique developed in the mid-1960s to prove related results about Turing machines}
      \field{isbn}{0890-5401}
      \field{journaltitle}{Information and computation}
      \field{number}{1}
      \field{title}{The Undecidability of the Semi-unification Problem}
      \field{volume}{102}
      \field{year}{1993}
      \field{pages}{83\bibrangedash 101}
      \range{pages}{19}
      \keyw{Applied sciences; Theoretical computing; Automata. Abstract machines. Turing machines; Exact sciences and technology; Computer science; control theory; systems}
    \endentry
    \entry{WELLS1999111}{article}{}
      \name{author}{1}{}{%
        {{hash=d9a851ef9f27bf32364711e9da0933fa}{%
           family={Wells},
           familyi={W\bibinitperiod},
           given={J.B.},
           giveni={J\bibinitperiod}}}%
      }
      \strng{namehash}{d9a851ef9f27bf32364711e9da0933fa}
      \strng{fullhash}{d9a851ef9f27bf32364711e9da0933fa}
      \strng{bibnamehash}{d9a851ef9f27bf32364711e9da0933fa}
      \strng{authorbibnamehash}{d9a851ef9f27bf32364711e9da0933fa}
      \strng{authornamehash}{d9a851ef9f27bf32364711e9da0933fa}
      \strng{authorfullhash}{d9a851ef9f27bf32364711e9da0933fa}
      \field{labelalpha}{Wel99}
      \field{sortinit}{W}
      \field{sortinithash}{ecb89ff85896a47dc313960773ac311d}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{Girard and Reynolds independently invented System F (a.k.a. the second-order polymorphically typed lambda calculus) to handle problems in logic and computer programming language design, respectively. Viewing F in the Curry style, which associates types with untyped lambda terms, raises the questions of typability and type checking. Typability asks for a term whether there exists some type it can be given. Type checking asks, for a particular term and type, whether the term can be given that type. The decidability of these problems has been settled for restrictions and extensions of F and related systems and complexity lower-bounds have been determined for typability in F, but this report is the first to resolve whether these problems are decidable for System F. This report proves that type checking in F is undecidable, by a reduction from semi-unification, and that typability in F is undecidable, by a reduction from type checking. Because there is an easy reduction from typability to type checking, the two problems are equivalent. The reduction from type checking to typability uses a novel method of constructing lambda terms that simulate arbitrarily chosen type environments. All of the results also hold for the Î»I-calculus.}
      \field{issn}{0168-0072}
      \field{journaltitle}{Annals of Pure and Applied Logic}
      \field{number}{1}
      \field{title}{Typability and type checking in System F are equivalent and undecidable}
      \field{volume}{98}
      \field{year}{1999}
      \field{pages}{111\bibrangedash 156}
      \range{pages}{46}
      \verb{doi}
      \verb https://doi.org/10.1016/S0168-0072(98)00047-5
      \endverb
      \verb{urlraw}
      \verb https://www.sciencedirect.com/science/article/pii/S0168007298000475
      \endverb
      \verb{url}
      \verb https://www.sciencedirect.com/science/article/pii/S0168007298000475
      \endverb
      \keyw{System F,Semi-unification,Type inference,Typability,Type checking,Lambda calculus}
    \endentry
  \enddatalist
\endrefsection
\endinput

